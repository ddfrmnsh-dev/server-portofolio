// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  username      String?
  email         String?   @unique
  password      String
  profession    String?
  isActive      Boolean?  @map("is_active")
  image         Image[]
  post          Post[]
  project       Project[]
  pathImg       String?   @map("path_img")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
}

model Project {
  id            Int       @id @default(autoincrement())
  name          String?
  slug          String?
  description   String?   @db.LongText
  linkWebsite   String?   @map("link_website")
  userId        Int       @map("user_id")
  author        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      Int?      @map("client_id")
  client        Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  image         Image[]
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
}

model Image {
  id            Int          @id @default(autoincrement())
  name          String?
  pathImg       String?      @map("path_img")
  projectId     Int?         @map("project_id")
  project       Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  postId        Int?         @map("post_id")
  post          Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId        Int?         @map("user_id")
  user          User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
}

model Client {
  id          Int      @id @default(autoincrement())
  name        String?
  pathLogo    String?  @map("path_logo")
  project     Project[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Post {
  id               Int        @id @default(autoincrement())
  title            String?
  description      String?    
  content          String?    @db.LongText
  slug             String?    @unique
  published        Boolean    @default(false)
  categories       CategoryOnPost[]
  image            Image[]
  authorId         Int        @map("author_id")
  author           User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
}

model Category {
  id        Int          @id @default(autoincrement())
  name      String
  slug      String
  post      CategoryOnPost[]   
  createdAt DateTime?    @default(now()) @map("created_at")
  updatedAt DateTime?    @updatedAt @map("updated_at")
}

model CategoryOnPost {
  id          Int       @id @default(autoincrement())
  postId      Int       @map("post_id")
  categoryId  Int       @map("category_id")
  post        Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}